name: Build and Release JSON

on:
  push:
    branches:
      - master

jobs:
  test-and-build:
    runs-on: ubuntu-latest
    
    steps:
      # Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      # Install dependencies
      - name: Install Dependencies
        run: |
          pip install -r requirements.txt

      # Run pytest to ensure the code is passing
      - name: Run Pytest
        run: |
          pytest

      # Run build.py to generate the final JSON file and save artifact with run ID
      - name: Run Build Script
        run: |
          python build.py > final.json

      # Upload the final.json as an artifact using GitHub run_id
      - name: Upload Final JSON as Artifact
        uses: actions/upload-artifact@v3
        with:
          name: final-json-${{ github.run_id }}
          path: final.json

  commit-json-to-branch:
    runs-on: ubuntu-latest
    needs: test-and-build

    steps:
      # Checkout the repository and target branch
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          ref: json-files-branch # Checkout the specific branch where JSON files will be committed

      # Download the artifact with the final JSON file using the run ID
      - name: Download Final JSON Artifact
        uses: actions/download-artifact@v3
        with:
          name: final-json-${{ github.run_id }}
          path: .

      # Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      # Generate UNIX timestamp
      - name: Generate UNIX Timestamp
        id: timestamp
        run: |
          echo "TIMESTAMP=$(date +%s)" >> $GITHUB_ENV

      # Minify and compress the JSON file
      - name: Minify and Compress JSON
        run: |
          # Create versioned folder
          TIMESTAMP=${{ env.TIMESTAMP }}
          VERSIONED_FOLDER="dabi_v${TIMESTAMP}"
          mkdir -p $VERSIONED_FOLDER
          
          # Minify the final.json
          python -c 'import json; data = json.load(open("final.json")); json.dump(data, open(f"{VERSIONED_FOLDER}/final.min.json", "w"), separators=(",", ":"))'
          
          # Compress the original final.json using gzip
          gzip -c final.json > "${VERSIONED_FOLDER}/final.json.gz"
          
          # Move the original JSON to the versioned folder
          mv final.json "${VERSIONED_FOLDER}/final.json"
          
          # Copy the minified and original json to the latest version
          cp "${VERSIONED_FOLDER}/final.json" dabi_latest.json
          cp "${VERSIONED_FOLDER}/final.min.json" dabi_latest.min.json
          cp "${VERSIONED_FOLDER}/final.json.gz" dabi_latest.json.gz

      # Generate diff between old_latest.json and latest.json using diff.py
      - name: Generate Diff between Old and Latest JSON
        run: |
          # Ensure old_latest.json exists to avoid errors
          if [ ! -f old_latest.json ]; then touch old_latest.json; fi
          python diff.py old_latest.json dabi_latest.json > diff_output.txt

      # Commit and push the versioned and latest JSON files to the specified branch
      - name: Commit and Push JSON Files to Branch
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add dabi_latest.json dabi_latest.min.json dabi_latest.json.gz diff_output.txt
          git add "${VERSIONED_FOLDER}"
          git commit -m "Update latest and versioned JSON files for dabi_v${TIMESTAMP}"
          git push origin json-files-branch

      # Upload the diff file as an artifact
      - name: Upload Diff as Artifact
        uses: actions/upload-artifact@v3
        with:
          name: diff-output-${{ github.run_id }}
          path: diff_output.txt

  release:
    runs-on: ubuntu-latest
    needs: commit-json-to-branch

    steps:
      # Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Download the artifact with the final JSON file using the run ID
      - name: Download Final JSON Artifact
        uses: actions/download-artifact@v3
        with:
          name: final-json-${{ github.run_id }}
          path: .

      # Download the diff artifact with the diff output
      - name: Download Diff Artifact
        uses: actions/download-artifact@v3
        with:
          name: diff-output-${{ github.run_id }}
          path: .

      # Use the diff_output.txt content for release notes
      - name: Read Diff Content
        id: diff_content
        run: |
          DIFF_CONTENT=$(cat diff_output.txt)
          echo "DIFF_CONTENT<<EOF" >> $GITHUB_ENV
          echo "$DIFF_CONTENT" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      # Create a GitHub release with the UNIX timestamp as the tag version and include diff content
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "v${{ env.TIMESTAMP }}"
          release_name: "Release v${{ env.TIMESTAMP }} üöÄüéâ"
          body: |
            ## üìù JSON Files are Ready!
            - Here's the latest JSON output from the build.
            - Original: `dabi_v${{ env.TIMESTAMP }}/final.json`
            - Minified: `dabi_v${{ env.TIMESTAMP }}/final.min.json`
            - Gzipped: `dabi_v${{ env.TIMESTAMP }}/final.json.gz`
            - **Diff with previous version**:
            ```
            ${{ env.DIFF_CONTENT }}
            ```
