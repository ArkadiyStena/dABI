from pprint import pprint

from tests.test_base import *


def test_get_method():
    with open('examples/get_methods.yaml', 'r') as stream:
        methods = list(yaml.safe_load_all(stream))
        context.update_subcontext()

        tmp = SmartContractType(context)
        get_method = GetMethodType(context, anon_getter=tmp.anon_getter)
        get_method.parse(methods[0])
        assert get_method.to_dict() == [{'labels': {},
                                         'metadata': {'description': '', 'link': '', 'name': ''},
                                         'method_args': [{'labels': {'name': 'anon_0'},
                                                          'metadata': {'description': '', 'link': '', 'name': ''},
                                                          'required': None,
                                                          'type': 'Cell'},
                                                         {'labels': {'name': 'test'},
                                                          'metadata': {'description': '', 'link': '', 'name': ''},
                                                          'required': None,
                                                          'type': 'Slice'},
                                                         {'items': [{'labels': {'name': 'anon_2'},
                                                                     'metadata': {'description': '',
                                                                                  'link': '',
                                                                                  'name': ''},
                                                                     'required': None,
                                                                     'type': 'Int'}],
                                                          'labels': {'name': 'anon_1'},
                                                          'metadata': {'description': '', 'link': '', 'name': ''},
                                                          'required': None,
                                                          'type': 'Tuple'}],
                                         'method_args_hash': '1D11BE84A6C9FC477169F2E7E7D734C17CC6A096CAC6F34971D367D1E5209098',
                                         'method_id': 123631,
                                         'method_name': 't1',
                                         'method_result': [],
                                         'method_result_hash': 'AE2A55DD8FC509FB84F03E978C7DE250D74C8A7E95E8FC52C23C6CC155690347',
                                         'result_length_strict_check': True,
                                         'result_strict_type_check': True}]
        context.update_subcontext()

        tmp = SmartContractType(context)
        get_method = GetMethodType(context, anon_getter=tmp.anon_getter)
        get_method.parse(methods[1])
        assert get_method.to_dict() == [{'labels': {'dton_parse_prefix': 'parsed_cool_'},
                                         'metadata': {'description': 'Get my cool data from this methods',
                                                      'link': '',
                                                      'name': 'my-cool-get-method'},
                                         'method_args': [{'labels': {'name': 'anon_0'},
                                                          'metadata': {'description': '',
                                                                       'link': '',
                                                                       'name': 'Test cell'},
                                                          'required': None,
                                                          'type': 'Cell'},
                                                         {'labels': {'name': 'anon_1'},
                                                          'metadata': {'description': '', 'link': '', 'name': ''},
                                                          'required': None,
                                                          'tlb': {
                                                              'id': '546DDE1FA200A9995CDD473F0D2E31BB85ECDC1A9EF2809BAD5DBB4EA70F390A',
                                                              'object': 'TestB'},
                                                          'type': 'Slice'},
                                                         {'items': [{'labels': {'name': 'anon_3'},
                                                                     'metadata': {'description': '',
                                                                                  'link': '',
                                                                                  'name': ''},
                                                                     'required': None,
                                                                     'type': 'Cell'},
                                                                    {'labels': {'name': 'anon_4'},
                                                                     'metadata': {'description': '',
                                                                                  'link': '',
                                                                                  'name': ''},
                                                                     'required': None,
                                                                     'tlb': {
                                                                         'id': '546DDE1FA200A9995CDD473F0D2E31BB85ECDC1A9EF2809BAD5DBB4EA70F390A',
                                                                         'object': 'TestC'},
                                                                     'type': 'Slice'},
                                                                    {'items': [{'labels': {'name': 'anon_6'},
                                                                                'metadata': {'description': '',
                                                                                             'link': '',
                                                                                             'name': ''},
                                                                                'required': None,
                                                                                'type': 'Int'}],
                                                                     'labels': {'name': 'anon_5'},
                                                                     'metadata': {'description': '',
                                                                                  'link': '',
                                                                                  'name': ''},
                                                                     'required': None,
                                                                     'type': 'Tuple'}],
                                                          'labels': {'name': 'anon_2'},
                                                          'metadata': {'description': '', 'link': '', 'name': ''},
                                                          'required': None,
                                                          'type': 'Tuple'}],
                                         'method_args_hash': 'C2E993318EB208C98F6F0681A994A7538C2C4D6570C50E62413AE1D59DD381E8',
                                         'method_id': 85793,
                                         'method_name': 'get_cool_smc',
                                         'method_result': [{'labels': {'name': 'anon_7'},
                                                            'metadata': {'description': '', 'link': '', 'name': ''},
                                                            'required': 256,
                                                            'type': 'Int'},
                                                           {'labels': {'field': 'content', 'name': 'anon_8'},
                                                            'metadata': {'description': '',
                                                                         'link': '',
                                                                         'name': 'Content of my NFT'},
                                                            'required': None,
                                                            'type': 'Cell'}],
                                         'method_result_hash': 'E7C494A8F44626068DC600CD62F065C36D116BE772040DE418737DB5415807D1',
                                         'result_length_strict_check': False,
                                         'result_strict_type_check': True},
                                        {'labels': {'dton_parse_prefix': 'parsed_cool_'},
                                         'metadata': {'description': 'Get my cool data from this methods',
                                                      'link': '',
                                                      'name': 'my-cool-get-method'},
                                         'method_args': [],
                                         'method_args_hash': '080FB7C908744FDC42C99B777511A890B04242167D30CD0F3EC4A3A542E1EB79',
                                         'method_id': 87882,
                                         'method_name': 'second_method',
                                         'method_result': [{'labels': {'name': 'anon_9'},
                                                            'metadata': {'description': '', 'link': '', 'name': ''},
                                                            'required': None,
                                                            'type': 'Int'}],
                                         'method_result_hash': 'E6EB6425907C5A933F7A883A368950B0AE6094BF897660145D6A4210817FE743',
                                         'result_length_strict_check': True,
                                         'result_strict_type_check': True},
                                        {'labels': {'dton_parse_prefix': 'parsed_cool_', 'sub_field': 'ok'},
                                         'metadata': {'description': 'Get my cool data from this methods',
                                                      'link': 'https://lol.me/',
                                                      'name': 'my-cool-get-method'},
                                         'method_args': [],
                                         'method_args_hash': '080FB7C908744FDC42C99B777511A890B04242167D30CD0F3EC4A3A542E1EB79',
                                         'method_id': 105222,
                                         'method_name': 'test',
                                         'method_result': [{'labels': {'field': 'test_int', 'name': 'anon_10'},
                                                            'metadata': {'description': '', 'link': '', 'name': ''},
                                                            'required': None,
                                                            'type': 'Int'}],
                                         'method_result_hash': 'E6EB6425907C5A933F7A883A368950B0AE6094BF897660145D6A4210817FE743',
                                         'result_length_strict_check': True,
                                         'result_strict_type_check': True}]
